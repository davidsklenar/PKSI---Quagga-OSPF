{"name":"Quagga OSPF","tagline":"PKS I Projekt #1","body":"### Konfigurace Quagga OSPF.\r\n\r\n1. Stáhneme a nainstalujeme balíček quagga.\r\n  ```\r\n  $ apt-get install quagga\r\n  ```\r\n\r\n2. Soubor **_/etc/quagga/daemons_** otevřeme v textovém editoru (např. nano) a povolíme daemony, které chceme používat přiřazením hodnoty yes k daemonu. V našem případě _zebra_ a _ospfd_.\r\n  ```\r\n  $ nano /etc/quagga/daemons\r\n  ```\r\n  ```\r\n  zebra=yes\r\n  bgpd=no\r\n  ospfd=yes\r\n  ospf6d=no\r\n  ```\r\n\r\n3. Restartujeme quaggu\r\n  ```\r\n  $ /etc/init.d/quagga restart\r\n  ```\r\n\r\n4. Vytvoříme soubory zebra.conf a ospfd.conf zkopírováním ukázkových souborů z lokace _**/usr/share/doc/quagga/examples/**_\r\n  ```\r\n  $ cp /usr/share/doc/quagga/examples/zebra.conf.sample /etc/quagga/zebra.conf\r\n  $ cp /usr/share/doc/quagga/examples/ospfd.conf.sample /etc/quagga/ospfd.conf\r\n  ```\r\n\r\n5. Změníme vlastníka a práva u všech souborů s koncovkou .conf\r\n  ```\r\n  $ chown quagga.quaggavty /etc/quagga/*.conf\r\n  $ chmod 640 /etc/quagga/*.conf\r\n  ```\r\n\r\n6. Restartujeme quaggu\r\n  ```\r\n  $ /etc/init.d/quagga restart\r\n  ```\r\n\r\n7. Zjištění otevřených portů na našem PC.\r\n  ```\r\n  $ nmap localhost\r\n  ```\r\n\r\n8. Spustíme nastavení Zebry. Výchozí heslo: zebra\r\n  ```\r\n  $ telnet localhost 2601\r\n  ```\r\n  ```\r\n  Password: zebra\r\n  Router> enable\r\n  Router# conf t\r\n  Router(config)# int eth1\r\n  Router(config-if)# ip address 192.168.2.4/24\r\n  Router(config)# exit\r\n  Router(config-if)# int eth2\r\n  Router(config-if)# ip address 192.168.1.2/24\r\n  Router(config-if)# exit\r\n  Router(config)# ip forwarding\r\n  ```\r\n\r\n9. Spustíme nastavení OSPF. Výchozí heslo: zebra\r\n  ```\r\n  $ telnet localhost 2604\r\n  ```\r\n  ```\r\n  Password: zebra\r\n  ospfd> enable\r\n  ospfd# conf t\r\n  ospfd(config)# router ospf\r\n  ospfd(config-router)# network 192.168.2.0/24 area 0\r\n  ospfd(config-router)# network 192.168.1.0/24 area 0\r\n  ```\r\n\r\n\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at http://help.github.com/pages or contact support@github.com and we’ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}